###################
## Caelainn Barr ##
## The Guardian  ##
## @caelainnbarr ##
###################

#Welcome to R for Journalists, Day 2

#Today we’re going to:
# - Put out R skills into practice
# - Change variable names
# - How to export your work
# - Split columns
# - Join data sets, by combining on columns
# - Learn about basic statistical packages in R
# - Carry out a linear regression
# - Work with ggplot2 and plots
# - Look at some packages for API calls
# - Joining larger datasets

#Let’s get started

####################################
## Practical: Apply your R skills ##
####################################

#Yesterday we looked at a dataset from the Luxembourg Income Study (LIS)
#We looked at the Equivalised Disposable Household Income Weighted (EDHIW) for Germany
#Today we’re going to look at a similar dataset from LIS 
#This one is based on the Personal Income from Labour Weighted (PILW) for Germany
#I want you to run the same analysis on the dataset as we did yesterday

#The file you need to run the analysis on is in the data project, it's called DE_PILW.csv
#Here are the code snippets to remind you of the basics of what you need to run the analysis
#This is yesterday’s code, you need to update the file names and variables 

#Read the csv in and assign it to an object
#disposableincome <- read.csv("DE_EDHIW.csv")

#View the data
#View(disposableincome)

#Get a sense of the data
#dim, names, head, tail, ncol, nrow 

#install and load packages dplyr and tidyr
#install.packages("dplyr")
#library(“dplyr”)

#Sort the data
#arrange(disposableincome,EDHIW)
#arrange(disposableincome,desc(EDHIW))

#Filter the data, using grep and logical operators
#disposableincome[grep("80 years and over", disposableincome$Age), ]
#filter(disposableincome, Age == "80 years and over")

###############################
## Changing variables & more ##
###############################

#If we want to change to change the name of a variable we can use the colnames function
#If we want to change all the column names we can reassign
#Let’s apply it to the dataset we just loaded and is called pilw
colnames(pilw) <- c("Survey", "Age", "PILW_SP", "PILW_HS", "PILW_C", "PILW_O", "PILW")

#Adding in a new column based on two variables
pilw$SurveyAge <- paste(pilw$Survey,pilw$Age)

#Averages and outliers
median(pilw$PILW)
mean(pilw$PILW)
min(pilw$PILW)
max(pilw$PILW)

#If we want to write to a csv file we use the write.csv function
#Let's write the pilw, with the data to a new file called all_pilw.csv
write.csv(pilw, file="all_pilw.csv", row.names=FALSE)

#################################
## Basic Statistics in RStudio ##
#################################

#In this session we're going to look at built in data and statistics in RStudio

#In this class we'll look at:
#1. Built in data in R
#2. Basic descriptive statistics
#3. Beyond summary statistics

##########################
##1. Built in data in R ##
##########################

#R comes with a number of built in packages for analysis
#This means you can run simple analysis on practice data sets

#To see how R gives you the ability to analyse your data simply and effectively we're going to use one it's built in data packages

#To see a full list of the packages
data()

#We're going to use airquality dataset for this class
#Open it up and take a look…
airquality

#Let’s also find out more about the dataset
?airquality

#If we were going to use this in a story about air pollution what might we want to know?

###################################
##2. Descriptive statistics in R ##
###################################

#We've already looked at what to do when you have a data set and you need to clean it or join data to a table
#What about when you want to explore the data itself?

#The first step is to look at the descriptive statistics
#What are descriptive statistics?

#The summary function gives you basic descriptive statistics 
??summary

#Let’s look at the summary statistics for the Wind column in the airquality dataset
summary(airquality$Wind)

#Let’s look through the details of what is returned from this query…
#What might you want to use these for?

#Let’s run the summary analysis for the entire dataset
summary(airquality)

#There are some unusual results in there
#Any ideas why we are getting the summary stats for month and day?

#Looking at the results, what might you use from this to describe your data? 
#Let’s come up with a few top lines from the data…

#################################
##3. Beyond summary statistics ##
#################################

#Let’s load in a new dataset from my github page
#We’re going to look at data on smokers
#Props to Mike Marin on this dataset…

#Let’s read in the data
#Note we’re reading in a table this time
lung <- read.table("LungCapData.txt", header=T)

#What’s different about this data to that of before?

#Let’s check out the data headers
names(lung)

#Of course we can also get the summary statistics for the entire table as well
summary(lung)

#What is different in this summary table to the first one we created?

#If we want to summarize a categorical variable, Smoke, this is done in a summary table
#It’s summarized by a frequency or proportion
table(lung$Smoke)

#So we know the number of smokers and non-smokers
#Let’s get the total number of people in the survey
length(lung$Smoke)

#Let’s use this to calculate the proportion of smokers and non-smokers
table(lung$Smoke)/725

#Or we can do it like this…
table(lung$Smoke)/length(lung$Smoke)
#Why does this also work?

#Let’s look at this based on the gender breakdown
table(lung$Smoke, lung$Gender)

#Let’s look at working with the numeric variables in the data set
#We’ll consider the appropriate number to use looking at the average…
mean(lung$LungCap)

#We can also trim the mean if we are concerned that there may be outliers
mean(lung$LungCap, trim=0.10)

#What can you tell by comparing the results of the mean and the trimmed mean?

#Let’s look at the median as well
median(lung$LungCap)

#Based on these results what number might you want to report in your story?

#Let’s take a further look at some of the further simple stats functions..

#To calculate the variance use var
var(lung$LungCap)
#When might we use this?

#Let’s get the standard deviation
sd(lung$LungCap)
#What is the standard deviation?

#Let’s look at the correlation between lung capacity and age
cor(lung$LungCap, lung$Age)
#How can we interpret the result?

#What other variables appear to have a strong correlation?

##############################
## Linear Regression with R ##
##############################

#We've just looked at descriptive statistics - figures that describe the data
#Now we're going to look at inferential statistics - figures that allow us to draw judgements from the data

#Models quantify the relationship between our variables and allow us to make predictions
#Regression analysis help us level the playing field when we want to compare one group to another - in this example one school to another
#We can also think of them as the ability predict outcomes
#However they can be easy to do and hard to understand or interpret
#So if you decide to use regression analysis in your reporting proceed with caution and make sure you understand your analysis before pitching it or publishing it

#We're going to look at school results and free meals data
#Let's load the data and take a look
school <- read.csv("schools.csv")
View(school)

#Preparation of the data is most of the work in a regression analysis
#You need to decide what are the (x) independent and (y) dependent variables
#What are independent and dependent variables?

#The lm function performs a linear regression and reports the coefficients
#lm(y ~ x, data = dataset)
#Apply this model to the data

lm(ReadHigh ~ LowIncPct, data=school)
lm(ReadMed ~ LowIncPct, data=school)

#Is the model statistically significant?
#Save your model to a variable and then you can run analysis against it

high <- lm(ReadHigh ~ LowIncPct, data=school)
med <- lm(ReadMed ~ LowIncPct, data=school)

#We have saved the output to variables high and med
#Now we can run a series of regression statistics against the variables
#We're going to look at summary statistics; ANOVA; deviance and coefficient
summary(high)
ANOVA(high)
deviance(high)
coef(high)

#The summary statistics will give you a run down of how significant different elements of the results are
#The key one you want to look at is the F statistic, which is a the bottom of the summary 

#As ever with data journalism if you're unsure of what the results are showing you or if you can use the results to say what you want to say - keep asking questions and report more
#Never be afraid to run your analysis by an expert in the field, be that an academic or a statistician

####################
## Visuals with R ##
####################

#Simple and elegant plots can be created with the ggplot2 package
#Let’s install it
install.packages("ggplot2")
library("ggplot2")

#Let’s say we want to plot some of the data in the lung dataset we have just looked at
#The qplot function will allow us to do this easily
#The function only requires three elements - what should go on the x and y axis as well as the dataset

#If we wanted to plot lung capacity by age to get a sense if there is a relationship between the variables
#We would place our independent variable on the X axis and our dependent variable on our Y axis
#What are independent and dependent variables?
 
qplot(data=lung,LungCap,Age)

#Let’s give our plot a title
qplot(data=lung,LungCap,Age,main="Lung Capacity by Age")

#gglot can also create many other kinds of graphs
#There are three core kinds of graphs in ggplot2
#Scatter plots, bar graphs and line graphs
#The only thing the varies between them is stating the kind, also known as the geom

#Scatter plot
ggplot(data=lung,
	aes(x=LungCap,
	y=Age)) +
	geom_point() +
	ggtitle("Lung Capacity by Age")

#Let’s look at what is happening in the code…

#Bar graph
ggplot(data=lung,
        aes(x=Age,
            y=LungCap)) +
     geom_bar(stat= 'identity') +
     ggtitle("Lung Capacity by Age")

#Line graph
ggplot(data = lung, 
       aes(x = Age, 
           y = LungCap)) +
  geom_point() +
  geom_line()

#We can also add colour, to highlight those whose mothers were smokers
ggplot(data=lung,
	aes(x=LungCap,
	y=Age,
	color=Smoke)) +
	geom_point() +
	ggtitle("Lung Capacity by Age")

#But there are too many points here
#We might want to consider faceting the plots
#It makes sense to facet based on the variable “Smoke” so we can see if the relationship varies when smoking is taken into account as a factor

ggplot(data=lung,
        aes(x=LungCap,
            y=Age,
            color=Smoke)) +
     	geom_point() +
	facet_wrap(~ Smoke) +
     ggtitle("Lung Capacity by Age")

#By plotting out lung capacity by age, and separating those whose mothers’ were smokers or non-smokers we can see the relationship much more clearly

#So let’s recap on the basics of the grammar of ggplot2
#It requires to know the data, the aesthetics and the geometry you wish to map
#Additional flourishes include color, facets, labels and titles

#We'll move on to a different script to take a look at working with APIs...

###########################################
## Final questions and further resources ##
###########################################

###################################
## 1. Troubleshooting in RStudio ##
###################################

#R can confront new users with a steep learning curve
#One of the most frustrating things with R can be the number of new things to become accustomed to 
#And sadly, as we've encountered, R does have its quirks 
#Most of the problems you'll encounter when starting out with R relate to syntax or case issues

#Some of the top things to run through in troubleshooting your code are:
#Case, spaces, quotation marks, syntax, data types and packages
#Tables (aka data frames) and column names (aka variables) are case sensitive
#Commands are also case sensitive
#As we've seen package names also need to be in quotation marks
#Sometimes there may be a specific package for the problem you are trying to solve

################################
## 2. Practicing with RStudio ##
################################

#The best way to learn any coding language is to have a real project to apply it on
#I learned R and RStudio from a statistician 
#I found I really understood the language and the tool when I had to use it
#Deadlines help too...

#There are plenty of built in datasets to play with in R
#They can be really useful for practicing and building up confidence
#To find built in datasets in R try this...
data()
#To find out more about the datasets try
??Cars93
#You can also create shortcuts to the 
data(Cars93, package="MASS")

##################################
## 3. Finding further resources ##
##################################

#To find further help with R…

#RStudio has a range of great tipsheets
# www.rstudio.com/resources/cheatsheets/

#Check out r-bloggers.com for hints and tips
#There are a lot of interesting discussions on R and new packages on the site

#The O'Reilly series of book are an invaluable resource
#I would recommend "The R Cookbook" by Paul Teetor

#Hadley Wickham, Chief Scientist at RStudio, is a font of knowledge for all things R
#He had created some of the most popular and useful packages in RStudio including ggplot
#You can find him on Twitter @hadleywickham

###################
## Caelainn Barr ##
## The Guardian  ##
## @caelainnbarr ##
###################